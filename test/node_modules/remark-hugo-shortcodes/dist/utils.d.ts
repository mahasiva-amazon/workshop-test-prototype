import { PartialRemarkOptions } from 'remark';
import { Parser } from 'remark-parse';
import { Compiler } from 'remark-stringify';
import { Processor } from 'unified';
import { Node } from 'unist';
/**
 * Recursively replace pretty UTF quotes and dashes with corresponding straight ones.
 */
export declare function cleanCurly<T>(val: T[]): T[];
export declare function cleanCurly<T>(val: T): T;
export interface ShortcodeAST extends Node {
    type: 'shortcode';
    identifier: string;
    attributes: Array<[string] | [string, string]>;
    closing: boolean;
    selfClosing: boolean;
    startBlock: string;
    endBlock: string;
}
export interface ParamParseResult {
    param: string;
    value: string;
}
export declare function parsePlainParam(value: string, endBlock: string, trimValue?: boolean, asValue?: boolean): ParamParseResult;
export declare function parseParam(value: string, endBlock: string, asValue?: boolean): ParamParseResult;
export declare function escapeAttribute(attr: string, forceQuotes?: boolean): string;
export declare function isRemarkParser(parser?: Processor<PartialRemarkOptions>['Parser']): parser is typeof Parser;
export declare function isRemarkCompiler(compiler: Processor<PartialRemarkOptions>['Compiler']): compiler is typeof Compiler;
export declare function isShortcodeAST(node: Node): node is ShortcodeAST;
