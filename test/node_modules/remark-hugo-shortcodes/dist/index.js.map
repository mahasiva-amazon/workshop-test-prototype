{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAGA,yCAA8C;AAC9C,qCAAuC;AACvC,mCAAoG;AAkDhG,2FAlDK,kBAAU,OAkDL;AACV,+FAnDmD,sBAAc,OAmDnD;AAzBlB,SAAgB,UAAU,CAAwC,OAA0B;IACxF,MAAM,MAAM,GAA4B,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,MAAM,IAAI;QAC9D,CAAC,KAAK,EAAE,KAAK,CAAC;QACd,CAAC,KAAK,EAAE,KAAK,CAAC;KACjB,CAAA;IACD,MAAM,UAAU,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,UAAU,IAAI,KAAK,CAAA;IACtD,MAAM,kBAAkB,GAAG,IAAI,GAAG,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,kBAAkB,IAAI,EAAE,CAAC,CAAA;IAE5E,IAAI,sBAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAA;QACpC,MAAM,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAE,MAAc,CAAC,eAAiD,CAAA;QAC3H,MAAM,OAAO,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAA;QAEvE,UAAU,CAAC,SAAS,GAAG,qBAAY,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAA;QAC/D,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,CAAA;KAC1D;IAED,IAAI,wBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAA;QACxC,QAAQ,CAAC,QAAQ,CAAC,SAAS,GAAG,4BAAiB,CAAA;KAClD;AACL,CAAC;AArBD,gCAqBC","sourcesContent":["import { PartialRemarkOptions } from 'remark'\n// tslint:disable-next-line: no-implicit-dependencies\nimport { Processor } from 'unified'\nimport { shortcodeCompiler } from './compiler'\nimport { getTokenizer } from './parser'\nimport { cleanCurly, isRemarkCompiler, isRemarkParser, isShortcodeAST, ShortcodeAST } from './utils'\n\nexport interface ShortcodeOptions {\n    /**\n     * Array of shortcode tokens as `[start, end]`\n     *\n     * @default ```\n     * [ ['{{<', '>}}'], ['{{%', '%}}'] ]\n     * ```\n     */\n    tokens?: Array<[string, string]>\n    /**\n     * Whether to parse inline shortcodes\n     *\n     * @default false\n     */\n    inlineMode?: boolean,\n\n    /**\n     * Attributes where value contains markdown\n     *\n     * @default []\n     */\n    markdownAttributes?: string[]\n}\n\nexport function shortcodes(this: Processor<PartialRemarkOptions>, options?: ShortcodeOptions) {\n    const tokens: Array<[string, string]> = (options || {}).tokens || [\n        ['{{<', '>}}'],\n        ['{{%', '%}}']\n    ]\n    const inlineMode = (options || {}).inlineMode || false\n    const markdownAttributes = new Set((options || {}).markdownAttributes || [])\n\n    if (isRemarkParser(this.Parser)) {\n        const parser = this.Parser.prototype\n        const tokenizers = inlineMode ? parser.inlineTokenizers : (parser as any).blockTokenizers as typeof parser.inlineTokenizers\n        const methods = inlineMode ? parser.inlineMethods : parser.blockMethods\n\n        tokenizers.shortcode = getTokenizer(tokens, markdownAttributes)\n        methods.splice(methods.indexOf('html'), 0, 'shortcode')\n    }\n\n    if (isRemarkCompiler(this.Compiler)) {\n        const compiler = this.Compiler.prototype\n        compiler.visitors.shortcode = shortcodeCompiler\n    }\n}\n\nexport {\n    cleanCurly,\n    isShortcodeAST,\n    ShortcodeAST\n}\n"]}